"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.extendActionFailedValidation = exports.extendActionFailed = exports.extendActionCompleted = exports.extendActionRedux = exports.createAction = exports.mergeLocalFields = exports.buildActionType = exports.parseData = void 0;var _lodash = require("lodash");
var _constants = require("./constants");
var _uuid = _interopRequireDefault(require("uuid"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var parseData = function parseData(options, operation, payload) {var
  keyName = options.keyName,uuidVersion = options.uuidVersion,uuidOptions = options.uuidOptions;
  var data = Object.assign({}, payload);
  if (options.addKeyOnCreate && operation == _constants.ActionOperationEnum.CREATE && !payload[keyName]) {
    data._tempId = _uuid.default[uuidVersion](uuidOptions);
    data[keyName] = new Date().getTime();
  }
  return data;
};exports.parseData = parseData;

var buildActionType = function buildActionType(options, operation, name) {return (
  (options.prefix ? options.prefix + '_' : '') + (
  operation ? (0, _lodash.snakeCase)(operation) + '_' + (0, _lodash.snakeCase)(name) : (0, _lodash.snakeCase)(name))).
  toUpperCase();};exports.buildActionType = buildActionType;

var mergeLocalFields = function mergeLocalFields(options) {return (
    (0, _lodash.union)(['_tempId', '_rewrite'], options));};exports.mergeLocalFields = mergeLocalFields;

var createAction = function createAction(options, operation, name) {var _reduxwork;var payload = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var
  transport = options.transport,validationScheme = options.validationScheme,localFieldsName = options.localFieldsName,virtualFieldsName = options.virtualFieldsName;
  var data = parseData(options, operation, payload);

  var action = {
    reduxwork: (_reduxwork = {
      name: (0, _lodash.camelCase)(name),
      stage: null,
      operation: operation,
      transport: transport,
      validationScheme: validationScheme }, _defineProperty(_reduxwork,
    localFieldsName, options[localFieldsName]), _defineProperty(_reduxwork,
    virtualFieldsName, options[virtualFieldsName]), _reduxwork),

    type: buildActionType(options, operation, name),
    data: data };


  return action;
};exports.createAction = createAction;

var extendActionRedux = function extendActionRedux(action) {return (
    Object.assign({}, action, {
      reduxwork: Object.assign({}, action.reduxwork, {
        transport: _constants.TransportMethodEnum.REDUX,
        stage: _constants.ActionStageEnum.REDUX }) }));};exports.extendActionRedux = extendActionRedux;



var extendActionCompleted = function extendActionCompleted(action, data) {return (
    Object.assign({}, action, {
      type: action.type + '_' + _constants.ActionStageEnum.COMPLETED,
      data: data,
      reduxwork: Object.assign({}, action.reduxwork, {
        transport: _constants.TransportMethodEnum.REDUX,
        stage: _constants.ActionStageEnum.COMPLETED }) }));};exports.extendActionCompleted = extendActionCompleted;



var extendActionFailed = function extendActionFailed(action, error) {return (
    Object.assign({}, action, {
      type: action.type + '_' + _constants.ActionStageEnum.FAILED,
      error: error,
      reduxwork: Object.assign({}, action.reduxwork, {
        transport: _constants.TransportMethodEnum.REDUX,
        stage: _constants.ActionStageEnum.FAILED }) }));};exports.extendActionFailed = extendActionFailed;



var extendActionFailedValidation = function extendActionFailedValidation(action, validationError) {return (
    Object.assign({}, action, {
      type: action.type + '_' + _constants.ActionStageEnum.FAILED,
      validationError: validationError,
      reduxwork: Object.assign({}, action.reduxwork, {
        transport: _constants.TransportMethodEnum.REDUX,
        stage: _constants.ActionStageEnum.FAILED_VALIDATION }) }));};exports.extendActionFailedValidation = extendActionFailedValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,