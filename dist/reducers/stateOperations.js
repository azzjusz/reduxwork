"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.removeEntitiesFromState = exports.updateEntitiesInState = exports.addEntitiesToState = exports.upsertEntitiesToState = exports.updateState = exports.updateEntitieStatus = exports.updateActionErrors = exports.updateActionCache = exports.removeActionFromCache = exports.addActionToCache = void 0;var _lodash = require("lodash");function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var addActionToCache = function addActionToCache(state, uuid, cache) {return (
    Object.assign({}, state.actionCache, _defineProperty({}, uuid, cache)));};exports.addActionToCache = addActionToCache;

var removeActionFromCache = function removeActionFromCache(state, uuid) {return (
    (0, _lodash.omit)(state.actionCache, uuid));};exports.removeActionFromCache = removeActionFromCache;

var updateActionCache = function updateActionCache(state, uuid, cache) {return (
    cache ?
    addActionToCache(state, uuid, cache) :
    removeActionFromCache(state, uuid));};exports.updateActionCache = updateActionCache;

var updateActionErrors = function updateActionErrors(state, action) {return (
    Object.assign({}, state.actionErrors, _defineProperty({},
    action.uuid, {
      message: action.error,
      action: action })));};exports.updateActionErrors = updateActionErrors;



var updateEntitieStatus = function updateEntitieStatus(state, name, statuses) {return (
    Object.assign({}, state.entitieStatus, _defineProperty({}, name, Object.assign({}, state.entitieStatus[name], statuses))));};exports.updateEntitieStatus = updateEntitieStatus;

var updateState = function updateState(state, action, _ref) {var _ref$entitiesUpdate = _ref.entitiesUpdate,entitiesUpdate = _ref$entitiesUpdate === void 0 ? {} : _ref$entitiesUpdate,cacheUpdate = _ref.cacheUpdate,statusUpdate = _ref.statusUpdate,entityName = _ref.entityName;return (
    Object.assign({}, state, entitiesUpdate, {
      actionCache: cacheUpdate ? updateActionCache(state, cacheUpdate.uuid, cacheUpdate.entities) : {},
      entitieStatus: statusUpdate ? updateEntitieStatus(state, entityName, statusUpdate.statuses) : {},
      actionErrors: action.error ? updateActionErrors(state, action) : {},
      lastAction: action }));};exports.updateState = updateState;


var upsertEntitiesToState = function upsertEntitiesToState(state, action, _ref2) {var _ref2$entities = _ref2.entities,entities = _ref2$entities === void 0 ? {} : _ref2$entities,_ref2$statuses = _ref2.statuses,statuses = _ref2$statuses === void 0 ? {} : _ref2$statuses,entityName = _ref2.entityName;
  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      Object.assign({}, state[name], entity));});

  return updateState(state, action, {
    entitiesUpdate: entitiesUpdate,
    statusUpdate: { statuses: statuses, entities: entities },
    entityName: entityName });

};exports.upsertEntitiesToState = upsertEntitiesToState;

var addEntitiesToState = function addEntitiesToState(state, action, _ref3) {var _ref3$entities = _ref3.entities,entities = _ref3$entities === void 0 ? {} : _ref3$entities,_ref3$statuses = _ref3.statuses,statuses = _ref3$statuses === void 0 ? {} : _ref3$statuses,_ref3$cache = _ref3.cache,cache = _ref3$cache === void 0 ? false : _ref3$cache,entityName = _ref3.entityName;var
  uuid = action.uuid;
  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      Object.assign({}, state[name],
      cache ?
      (0, _lodash.mapValues)(entity, function (item) {return (
          Object.assign({}, item, { _temp: true }));}) :


      entity));});


  return updateState(state, action, {
    entitiesUpdate: entitiesUpdate,
    cacheUpdate: { uuid: uuid, entities: cache ? entities : null },
    statusUpdate: { statuses: statuses, entities: entities },
    entityName: entityName });

};exports.addEntitiesToState = addEntitiesToState;

var updateEntitiesInState = function updateEntitiesInState(state, action, _ref4) {var _ref4$entities = _ref4.entities,entities = _ref4$entities === void 0 ? {} : _ref4$entities,_ref4$statuses = _ref4.statuses,statuses = _ref4$statuses === void 0 ? {} : _ref4$statuses,_ref4$cache = _ref4.cache,cache = _ref4$cache === void 0 ? false : _ref4$cache,entityName = _ref4.entityName;var
  uuid = action.uuid;
  var affectedEntities = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      (0, _lodash.pick)(state[name], (0, _lodash.keys)(entity)));});

  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      Object.assign({}, state[name], (0, _lodash.mapValues)(state[name], function (item, key) {return (
          entity[key] ?
          (0, _lodash.omit)(
          Object.assign({}, item, entity[key], { _temp: true }),
          cache ? [] : ['_temp']) :


          item);})));});


  return updateState(state, action, {
    entitiesUpdate: entitiesUpdate,
    cacheUpdate: { uuid: uuid, entities: cache ? affectedEntities : null },
    statusUpdate: { statuses: statuses, entities: entities },
    entityName: entityName });

};exports.updateEntitiesInState = updateEntitiesInState;

var removeEntitiesFromState = function removeEntitiesFromState(state, action, _ref5) {var _ref5$entities = _ref5.entities,entities = _ref5$entities === void 0 ? {} : _ref5$entities,_ref5$statuses = _ref5.statuses,statuses = _ref5$statuses === void 0 ? {} : _ref5$statuses,_ref5$cache = _ref5.cache,cache = _ref5$cache === void 0 ? false : _ref5$cache,entityName = _ref5.entityName;var
  uuid = action.uuid;
  var affectedEntities = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      (0, _lodash.pick)(state[name], (0, _lodash.keys)(entity)));});

  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      (0, _lodash.omit)(state[name], (0, _lodash.keys)(entity)));});

  return updateState(state, action, {
    entitiesUpdate: entitiesUpdate,
    cacheUpdate: { uuid: uuid, entities: cache ? affectedEntities : null },
    statusUpdate: { statuses: statuses, entities: entities },
    entityName: entityName });

};exports.removeEntitiesFromState = removeEntitiesFromState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,