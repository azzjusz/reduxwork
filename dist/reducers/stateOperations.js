"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.removeEntitiesFromState = exports.updateEntitiesInState = exports.addEntitiesToState = exports.upsertEntitiesToState = exports.updateState = exports.updateEntitieStatus = exports.updateActionErrors = exports.updateActionCache = exports.removeActionFromCache = exports.addActionToCache = void 0;var _lodash = require("lodash");function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var addActionToCache = function addActionToCache(state, uuid, cache) {return (
    Object.assign({}, state.actionCache, _defineProperty({}, uuid, cache)));};exports.addActionToCache = addActionToCache;

var removeActionFromCache = function removeActionFromCache(state, uuid) {return (
    (0, _lodash.omit)(state.actionCache, uuid));};exports.removeActionFromCache = removeActionFromCache;

var updateActionCache = function updateActionCache(state, uuid, cache) {return (
    cache ?
    addActionToCache(state, uuid, cache) :
    removeActionFromCache(state, uuid));};exports.updateActionCache = updateActionCache;

var updateActionErrors = function updateActionErrors(state, uuid, error) {return (
    Object.assign({}, state.actionErrors, _defineProperty({}, uuid, error)));};exports.updateActionErrors = updateActionErrors;

var updateEntitieStatus = function updateEntitieStatus(state, entities, statuses) {return (
    Object.assign({}, state.entitieStatus, (0, _lodash.mapValues)(entities, function (entity, name) {return (
        Object.assign({}, state.entitieStatus[name], statuses));})));};exports.updateEntitieStatus = updateEntitieStatus;


var updateState = function updateState(state, _ref) {var _ref$entitiesUpdate = _ref.entitiesUpdate,entitiesUpdate = _ref$entitiesUpdate === void 0 ? {} : _ref$entitiesUpdate,cacheUpdate = _ref.cacheUpdate,statusUpdate = _ref.statusUpdate,errorUpdate = _ref.errorUpdate,uuid = _ref.uuid;return (
    Object.assign({}, state, entitiesUpdate, {
      actionCache: cacheUpdate ? updateActionCache(state, cacheUpdate.uuid, cacheUpdate.entities) : {},
      entitieStatus: statusUpdate ? updateEntitieStatus(state, statusUpdate.entities, statusUpdate.statuses) : {},
      actionErrors: errorUpdate ? updateActionErrors(state, errorUpdate.uuid, errorUpdate.error) : {},
      lastAction: uuid }));};exports.updateState = updateState;


var upsertEntitiesToState = function upsertEntitiesToState(state, _ref2) {var uuid = _ref2.uuid,_ref2$entities = _ref2.entities,entities = _ref2$entities === void 0 ? {} : _ref2$entities,_ref2$statuses = _ref2.statuses,statuses = _ref2$statuses === void 0 ? {} : _ref2$statuses;
  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      Object.assign({}, state[name], entity));});

  return updateState(state, {
    entitiesUpdate: entitiesUpdate,
    statusUpdate: { statuses: statuses, entities: entities },
    uuid: uuid });

};exports.upsertEntitiesToState = upsertEntitiesToState;

var addEntitiesToState = function addEntitiesToState(state, _ref3) {var uuid = _ref3.uuid,_ref3$entities = _ref3.entities,entities = _ref3$entities === void 0 ? {} : _ref3$entities,_ref3$statuses = _ref3.statuses,statuses = _ref3$statuses === void 0 ? {} : _ref3$statuses,_ref3$cache = _ref3.cache,cache = _ref3$cache === void 0 ? false : _ref3$cache,error = _ref3.error;
  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      Object.assign({}, state[name], entity));});

  return updateState(state, {
    entitiesUpdate: entitiesUpdate,
    cacheUpdate: { uuid: uuid, entities: cache ? entities : null },
    statusUpdate: { statuses: statuses, entities: entities },
    errorUpdate: error ? { uuid: uuid, error: error } : null,
    uuid: uuid });

};exports.addEntitiesToState = addEntitiesToState;

var updateEntitiesInState = function updateEntitiesInState(state, _ref4, _ref5) {var uuid = _ref4.uuid,_ref4$entities = _ref4.entities,entities = _ref4$entities === void 0 ? {} : _ref4$entities,_ref4$statuses = _ref4.statuses,statuses = _ref4$statuses === void 0 ? {} : _ref4$statuses,_ref4$cache = _ref4.cache,cache = _ref4$cache === void 0 ? false : _ref4$cache,error = _ref4.error;var keyName = _ref5.keyName;
  var affectedEntities = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      (0, _lodash.pick)(state[name], (0, _lodash.keys)(entity)));});

  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      Object.assign({}, state[name], (0, _lodash.mapValues)(state[name], function (item) {return (
          entity[item[keyName]] ? Object.assign({}, item, entity[item[keyName]]) : item);})));});


  return updateState(state, {
    entitiesUpdate: entitiesUpdate,
    cacheUpdate: { uuid: uuid, entities: cache ? affectedEntities : null },
    statusUpdate: { statuses: statuses, entities: entities },
    errorUpdate: error ? { uuid: uuid, error: error } : null,
    uuid: uuid });

};exports.updateEntitiesInState = updateEntitiesInState;

var removeEntitiesFromState = function removeEntitiesFromState(state, _ref6) {var uuid = _ref6.uuid,_ref6$entities = _ref6.entities,entities = _ref6$entities === void 0 ? {} : _ref6$entities,_ref6$statuses = _ref6.statuses,statuses = _ref6$statuses === void 0 ? {} : _ref6$statuses,_ref6$cache = _ref6.cache,cache = _ref6$cache === void 0 ? false : _ref6$cache,error = _ref6.error;
  var affectedEntities = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      (0, _lodash.pick)(state[name], (0, _lodash.keys)(entity)));});

  var entitiesUpdate = (0, _lodash.mapValues)(entities, function (entity, name) {return (
      (0, _lodash.omit)(state[name], (0, _lodash.keys)(entity)));});

  return updateState(state, {
    entitiesUpdate: entitiesUpdate,
    cacheUpdate: { uuid: uuid, entities: cache ? affectedEntities : null },
    statusUpdate: { statuses: statuses, entities: entities },
    errorUpdate: error ? { uuid: uuid, error: error } : null,
    uuid: uuid });

};exports.removeEntitiesFromState = removeEntitiesFromState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,