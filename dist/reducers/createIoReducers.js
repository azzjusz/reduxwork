"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createIoReducer;exports.normalizeToEntities = void 0;var _lodash = require("lodash");








var _normalizr = require("normalizr");
var _stateOperations = require("./stateOperations");function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var normalizeToEntities = function normalizeToEntities(data, name, options) {
  var datasets = (0, _lodash.isArray)(data) ? data : [data];
  var entities = {};
  (0, _lodash.forEach)(datasets, function (dataset) {
    var normalisedData = (0, _normalizr.normalize)(dataset, options.schemas[name]);
    (0, _lodash.forEach)(normalisedData.entities, function (entity, name) {
      entities[name] = Object.assign({}, entities[name] || {}, entity);
    });
  });
  return entities;
};exports.normalizeToEntities = normalizeToEntities;

function createIoReducer(name) {var _Object$assign3;var customActions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var actionName = (0, _lodash.toUpper)((0, _lodash.snakeCase)(name));
  var entityName = (0, _lodash.camelCase)(name);

  if (!options.schemas || !options.schemas[name])
  throw new Error('Missing normalize scheme');

  return Object.assign((_Object$assign3 = {}, _defineProperty(_Object$assign3, "FIND_".concat(
  actionName), function FIND_(state, action) {
    var statuses = {
      isFinding: true };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "FIND_".concat(

  actionName, "_FAILED"), function FIND__FAILED(state, action) {
    var statuses = {
      isFinding: false };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "FIND_".concat(

  actionName, "_COMPLETED"), function FIND__COMPLETED(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      init: true,
      isFinding: false };

    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, statuses: statuses, entityName: entityName });
  }), _defineProperty(_Object$assign3, "RECEIVE_".concat(

  actionName), function RECEIVE_(state, action) {
    var entities = normalizeToEntities(action.data, name, options);
    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, entityName: entityName });
  }), _defineProperty(_Object$assign3, "REMOVE_".concat(

  actionName), function REMOVE_(state, action) {
    var entities = normalizeToEntities(action.data, name, options);
    return (0, _stateOperations.removeEntitiesFromState)(state, action, { entities: entities, cache: false, entityName: entityName });
  }), _defineProperty(_Object$assign3, "CREATE_".concat(

  actionName), function CREATE_(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      isWriting: true };

    return (0, _stateOperations.addEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: true, entityName: entityName });
  }), _defineProperty(_Object$assign3, "CREATE_".concat(

  actionName, "_FAILED"), function CREATE__FAILED(state, action) {
    var entities = state.actionCache[action.uuid];
    var statuses = {
      isWriting: false };

    return (0, _stateOperations.removeEntitiesFromState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName });
  }), _defineProperty(_Object$assign3, "CREATE_".concat(

  actionName, "_COMPLETED"), function CREATE__COMPLETED(state, action) {
    var statuses = {
      isWriting: false };

    var entities = normalizeToEntities(action.payload, entityName, options);
    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "UPDATE_".concat(

  actionName), function UPDATE_(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      isWriting: true };

    return (0, _stateOperations.updateEntitiesInState)(state, action, { entities: entities, statuses: statuses, cache: true, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "UPDATE_".concat(

  actionName, "_FAILED"), function UPDATE__FAILED(state, action) {
    var entities = state.actionCache[action.uuid];
    var statuses = {
      isWriting: false };

    return (0, _stateOperations.updateEntitiesInState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "UPDATE_".concat(

  actionName, "_COMPLETED"), function UPDATE__COMPLETED(state, action) {
    var statuses = {
      isWriting: false };

    var entities = normalizeToEntities(action.payload, entityName, options);
    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "DESTROY_".concat(

  actionName), function DESTROY_(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      isWriting: true };

    return (0, _stateOperations.removeEntitiesFromState)(state, action, { entities: entities, statuses: statuses, cache: true, entityName: entityName });
  }), _defineProperty(_Object$assign3, "DESTROY_".concat(

  actionName, "_FAILED"), function DESTROY__FAILED(state, action) {
    var entities = state.actionCache[action.uuid];
    var statuses = {
      isWriting: false };

    return (0, _stateOperations.addEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName });
  }), _defineProperty(_Object$assign3, "DESTROY_".concat(

  actionName, "_COMPLETED"), function DESTROY__COMPLETED(state, action) {
    var statuses = {
      isWriting: false };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "SELECT_".concat(

  actionName), function SELECT_(state, action) {var
    data = action.data;
    // TODO: Object workaround
    var key = (0, _lodash.isObject)(data) ? data[options.keyName] : data;
    var selected = (0, _lodash.isArray)(key) ? key : [key];
    var statuses = {
      selected: selected };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "CLEAR_".concat(

  actionName), function CLEAR_(state) {
    return Object.assign({}, state, _defineProperty({},
    entityName, {}));

  }), _defineProperty(_Object$assign3, "RESET_".concat(

  actionName), function RESET_(state) {
    // TODO: Reset errors and cache
    return Object.assign({}, state, _defineProperty({},
    entityName, {}));

  }), _Object$assign3),

  (0, _lodash.mapValues)(customActions, function (reducer) {return function (state, action) {
      var instanceState = Object.assign({}, state[name]);
      return Object.assign({}, state, _defineProperty({}, name, reducer(instanceState, action)));
    };}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,