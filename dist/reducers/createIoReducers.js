"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createIoReducer;exports.normalizeToEntities = void 0;var _lodash = require("lodash");








var _normalizr = require("normalizr");
var _stateOperations = require("./stateOperations");function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var normalizeToEntities = function normalizeToEntities(data, name, options) {
  var datasets = (0, _lodash.isArray)(data) ? data : [data];
  var entities = {};
  (0, _lodash.forEach)(datasets, function (dataset) {
    var normalisedData = (0, _normalizr.normalize)(dataset, options.schemas[name]);
    (0, _lodash.forEach)(normalisedData.entities, function (entity, name) {
      entities[name] = Object.assign({}, entities[name] || {}, entity);
    });
  });
  return entities;
};exports.normalizeToEntities = normalizeToEntities;

function createIoReducer(name) {var _Object$assign3;var customActions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var actionName = (0, _lodash.toUpper)((0, _lodash.snakeCase)(name));
  var entityName = (0, _lodash.camelCase)(name);

  if (!options.schemas || !options.schemas[name])
  throw new Error('Missing normalize scheme');

  return Object.assign((_Object$assign3 = {}, _defineProperty(_Object$assign3, "FIND_".concat(
  actionName), function FIND_(state, action) {
    var statuses = {
      isFinding: true };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "FIND_".concat(

  actionName, "_FAILED"), function FIND__FAILED(state, action) {
    var statuses = {
      isFinding: false };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "FIND_".concat(

  actionName, "_COMPLETED"), function FIND__COMPLETED(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      init: true,
      isFinding: false };

    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, statuses: statuses, entityName: entityName });
  }), _defineProperty(_Object$assign3, "RECEIVE_".concat(

  actionName), function RECEIVE_(state, action) {
    var entities = normalizeToEntities(action.data, name, options);
    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, entityName: entityName });
  }), _defineProperty(_Object$assign3, "REMOVE_".concat(

  actionName), function REMOVE_(state, action) {
    var entities = normalizeToEntities(action.data, name, options);
    return (0, _stateOperations.removeEntitiesFromState)(state, action, { entities: entities, cache: false, entityName: entityName });
  }), _defineProperty(_Object$assign3, "CREATE_".concat(

  actionName), function CREATE_(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      isWriting: true };

    return (0, _stateOperations.addEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: true, entityName: entityName });
  }), _defineProperty(_Object$assign3, "CREATE_".concat(

  actionName, "_FAILED"), function CREATE__FAILED(state, action) {
    var entities = state.actionCache[action.uuid];
    var statuses = {
      isWriting: false };

    return (0, _stateOperations.removeEntitiesFromState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName });
  }), _defineProperty(_Object$assign3, "CREATE_".concat(

  actionName, "_COMPLETED"), function CREATE__COMPLETED(state, action) {
    var statuses = {
      isWriting: false };

    var entities = normalizeToEntities(action.payload, entityName, options);
    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "UPDATE_".concat(

  actionName), function UPDATE_(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      isWriting: true };

    return (0, _stateOperations.updateEntitiesInState)(state, action, { entities: entities, statuses: statuses, cache: true, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "UPDATE_".concat(

  actionName, "_FAILED"), function UPDATE__FAILED(state, action) {
    var entities = state.actionCache[action.uuid];
    var statuses = {
      isWriting: false };

    return (0, _stateOperations.updateEntitiesInState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "UPDATE_".concat(

  actionName, "_COMPLETED"), function UPDATE__COMPLETED(state, action) {
    var statuses = {
      isWriting: false };

    var entities = normalizeToEntities(action.payload, entityName, options);
    return (0, _stateOperations.upsertEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName }, options);
  }), _defineProperty(_Object$assign3, "DESTROY_".concat(

  actionName), function DESTROY_(state, action) {
    var entities = normalizeToEntities(action.payload, entityName, options);
    var statuses = {
      isWriting: true };

    return (0, _stateOperations.removeEntitiesFromState)(state, action, { entities: entities, statuses: statuses, cache: true, entityName: entityName });
  }), _defineProperty(_Object$assign3, "DESTROY_".concat(

  actionName, "_FAILED"), function DESTROY__FAILED(state, action) {
    var entities = state.actionCache[action.uuid];
    var statuses = {
      isWriting: false };

    return (0, _stateOperations.addEntitiesToState)(state, action, { entities: entities, statuses: statuses, cache: false, entityName: entityName });
  }), _defineProperty(_Object$assign3, "DESTROY_".concat(

  actionName, "_COMPLETED"), function DESTROY__COMPLETED(state, action) {
    var statuses = {
      isWriting: false };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      cacheUpdate: { uuid: action.uuid },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "SELECT_".concat(

  actionName), function SELECT_(state, action) {var
    data = action.data;
    // TODO: Object workaround
    var key = (0, _lodash.isObject)(data) ? data[options.keyName] : data;
    var selected = (0, _lodash.isArray)(key) ? key : [key];
    var statuses = {
      selected: selected };

    var entities = _defineProperty({}, entityName, {});
    return (0, _stateOperations.updateState)(state, action, {
      statusUpdate: { statuses: statuses, entities: entities },
      entityName: entityName });

  }), _defineProperty(_Object$assign3, "CLEAR_".concat(

  actionName), function CLEAR_(state) {
    return Object.assign({}, state, _defineProperty({},
    entityName, {}));

  }), _defineProperty(_Object$assign3, "RESET_".concat(

  actionName), function RESET_(state) {
    // TODO: Reset errors and cache
    return Object.assign({}, state, _defineProperty({},
    entityName, {}));

  }), _Object$assign3),

  (0, _lodash.mapValues)(customActions, function (reducer) {return function (state, action) {
      var instanceState = Object.assign({}, state[name]);
      return Object.assign({}, state, _defineProperty({}, name, reducer(instanceState, action)));
    };}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9yZWR1Y2Vycy9jcmVhdGVJb1JlZHVjZXJzLmpzIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZVRvRW50aXRpZXMiLCJkYXRhIiwibmFtZSIsIm9wdGlvbnMiLCJkYXRhc2V0cyIsImVudGl0aWVzIiwiZGF0YXNldCIsIm5vcm1hbGlzZWREYXRhIiwic2NoZW1hcyIsImVudGl0eSIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZUlvUmVkdWNlciIsImN1c3RvbUFjdGlvbnMiLCJhY3Rpb25OYW1lIiwiZW50aXR5TmFtZSIsIkVycm9yIiwic3RhdGUiLCJhY3Rpb24iLCJzdGF0dXNlcyIsImlzRmluZGluZyIsInN0YXR1c1VwZGF0ZSIsInBheWxvYWQiLCJpbml0IiwiY2FjaGUiLCJpc1dyaXRpbmciLCJhY3Rpb25DYWNoZSIsInV1aWQiLCJjYWNoZVVwZGF0ZSIsImtleSIsImtleU5hbWUiLCJzZWxlY3RlZCIsInJlZHVjZXIiLCJpbnN0YW5jZVN0YXRlIl0sIm1hcHBpbmdzIjoia0pBQUE7Ozs7Ozs7OztBQVNBO0FBQ0Esb0Q7Ozs7Ozs7O0FBUU8sSUFBTUEsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYUMsT0FBYixFQUF5QjtBQUMxRCxNQUFJQyxRQUFRLEdBQUcscUJBQVFILElBQVIsSUFBZ0JBLElBQWhCLEdBQXVCLENBQUNBLElBQUQsQ0FBdEM7QUFDQSxNQUFJSSxRQUFRLEdBQUcsRUFBZjtBQUNBLHVCQUFRRCxRQUFSLEVBQWtCLFVBQUFFLE9BQU8sRUFBSTtBQUMzQixRQUFJQyxjQUFjLEdBQUcsMEJBQVVELE9BQVYsRUFBbUJILE9BQU8sQ0FBQ0ssT0FBUixDQUFnQk4sSUFBaEIsQ0FBbkIsQ0FBckI7QUFDQSx5QkFBUUssY0FBYyxDQUFDRixRQUF2QixFQUFpQyxVQUFDSSxNQUFELEVBQVNQLElBQVQsRUFBa0I7QUFDakRHLE1BQUFBLFFBQVEsQ0FBQ0gsSUFBRCxDQUFSLEdBQWlC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S0FIK0IsRUFBaEMsQ0FsSk8sQ0FBUDtBQXNKRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgdG9VcHBlcixcclxuICBzbmFrZUNhc2UsXHJcbiAgY2FtZWxDYXNlLFxyXG4gIGlzQXJyYXksXHJcbiAgbWFwVmFsdWVzLFxyXG4gIGlzT2JqZWN0LFxyXG4gIGZvckVhY2hcclxufSBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICdub3JtYWxpenInO1xyXG5pbXBvcnQge1xyXG4gIHVwZGF0ZVN0YXRlLFxyXG4gIHVwc2VydEVudGl0aWVzVG9TdGF0ZSxcclxuICBhZGRFbnRpdGllc1RvU3RhdGUsXHJcbiAgdXBkYXRlRW50aXRpZXNJblN0YXRlLFxyXG4gIHJlbW92ZUVudGl0aWVzRnJvbVN0YXRlXHJcbn0gZnJvbSAnLi9zdGF0ZU9wZXJhdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVRvRW50aXRpZXMgPSAoZGF0YSwgbmFtZSwgb3B0aW9ucykgPT4ge1xyXG4gIGxldCBkYXRhc2V0cyA9IGlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdO1xyXG4gIGxldCBlbnRpdGllcyA9IHt9O1xyXG4gIGZvckVhY2goZGF0YXNldHMsIGRhdGFzZXQgPT4ge1xyXG4gICAgbGV0IG5vcm1hbGlzZWREYXRhID0gbm9ybWFsaXplKGRhdGFzZXQsIG9wdGlvbnMuc2NoZW1hc1tuYW1lXSk7XHJcbiAgICBmb3JFYWNoKG5vcm1hbGlzZWREYXRhLmVudGl0aWVzLCAoZW50aXR5LCBuYW1lKSA9PiB7XHJcbiAgICAgIGVudGl0aWVzW25hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgKGVudGl0aWVzW25hbWVdIHx8IHt9KSwgZW50aXR5KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHJldHVybiBlbnRpdGllcztcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUlvUmVkdWNlcihuYW1lLCBjdXN0b21BY3Rpb25zID0ge30sIG9wdGlvbnMgPSB7fSkge1xyXG4gIGNvbnN0IGFjdGlvbk5hbWUgPSB0b1VwcGVyKHNuYWtlQ2FzZShuYW1lKSk7XHJcbiAgY29uc3QgZW50aXR5TmFtZSA9IGNhbWVsQ2FzZShuYW1lKTtcclxuXHJcbiAgaWYgKCFvcHRpb25zLnNjaGVtYXMgfHwgIW9wdGlvbnMuc2NoZW1hc1tuYW1lXSlcclxuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBub3JtYWxpemUgc2NoZW1lJyk7XHJcblxyXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHtcclxuICAgIFtgRklORF8ke2FjdGlvbk5hbWV9YF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBzdGF0dXNlcyA9IHtcclxuICAgICAgICBpc0ZpbmRpbmc6IHRydWVcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgZW50aXRpZXMgPSB7IFtlbnRpdHlOYW1lXToge319O1xyXG4gICAgICByZXR1cm4gdXBkYXRlU3RhdGUoc3RhdGUsIGFjdGlvbiwge1xyXG4gICAgICAgIHN0YXR1c1VwZGF0ZTogeyBzdGF0dXNlcywgZW50aXRpZXMgfSxcclxuICAgICAgICBlbnRpdHlOYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYEZJTkRfJHthY3Rpb25OYW1lfV9GQUlMRURgXShzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHN0YXR1c2VzID0ge1xyXG4gICAgICAgIGlzRmluZGluZzogZmFsc2VcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgZW50aXRpZXMgPSB7IFtlbnRpdHlOYW1lXToge319O1xyXG4gICAgICByZXR1cm4gdXBkYXRlU3RhdGUoc3RhdGUsIGFjdGlvbiwge1xyXG4gICAgICAgIHN0YXR1c1VwZGF0ZTogeyBzdGF0dXNlcywgZW50aXRpZXMgfSxcclxuICAgICAgICBlbnRpdHlOYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYEZJTkRfJHthY3Rpb25OYW1lfV9DT01QTEVURURgXShzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gbm9ybWFsaXplVG9FbnRpdGllcyhhY3Rpb24ucGF5bG9hZCwgZW50aXR5TmFtZSwgb3B0aW9ucyk7XHJcbiAgICAgIGNvbnN0IHN0YXR1c2VzID0ge1xyXG4gICAgICAgIGluaXQ6IHRydWUsXHJcbiAgICAgICAgaXNGaW5kaW5nOiBmYWxzZVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gdXBzZXJ0RW50aXRpZXNUb1N0YXRlKHN0YXRlLCBhY3Rpb24sIHsgZW50aXRpZXMsIHN0YXR1c2VzLCBlbnRpdHlOYW1lIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYFJFQ0VJVkVfJHthY3Rpb25OYW1lfWBdKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgICAgY29uc3QgZW50aXRpZXMgPSBub3JtYWxpemVUb0VudGl0aWVzKGFjdGlvbi5kYXRhLCBuYW1lLCBvcHRpb25zKTtcclxuICAgICAgcmV0dXJuIHVwc2VydEVudGl0aWVzVG9TdGF0ZShzdGF0ZSwgYWN0aW9uLCB7IGVudGl0aWVzLCBlbnRpdHlOYW1lIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYFJFTU9WRV8ke2FjdGlvbk5hbWV9YF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBlbnRpdGllcyA9IG5vcm1hbGl6ZVRvRW50aXRpZXMoYWN0aW9uLmRhdGEsIG5hbWUsIG9wdGlvbnMpO1xyXG4gICAgICByZXR1cm4gcmVtb3ZlRW50aXRpZXNGcm9tU3RhdGUoc3RhdGUsIGFjdGlvbiwgeyBlbnRpdGllcywgY2FjaGU6IGZhbHNlLCBlbnRpdHlOYW1lIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYENSRUFURV8ke2FjdGlvbk5hbWV9YF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBlbnRpdGllcyA9IG5vcm1hbGl6ZVRvRW50aXRpZXMoYWN0aW9uLnBheWxvYWQsIGVudGl0eU5hbWUsIG9wdGlvbnMpO1xyXG4gICAgICBjb25zdCBzdGF0dXNlcyA9IHtcclxuICAgICAgICBpc1dyaXRpbmc6IHRydWVcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIGFkZEVudGl0aWVzVG9TdGF0ZShzdGF0ZSwgYWN0aW9uLCB7IGVudGl0aWVzLCBzdGF0dXNlcywgY2FjaGU6IHRydWUsIGVudGl0eU5hbWUgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIFtgQ1JFQVRFXyR7YWN0aW9uTmFtZX1fRkFJTEVEYF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBlbnRpdGllcyA9IHN0YXRlLmFjdGlvbkNhY2hlW2FjdGlvbi51dWlkXTtcclxuICAgICAgY29uc3Qgc3RhdHVzZXMgPSB7XHJcbiAgICAgICAgaXNXcml0aW5nOiBmYWxzZVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gcmVtb3ZlRW50aXRpZXNGcm9tU3RhdGUoc3RhdGUsIGFjdGlvbiwgeyBlbnRpdGllcywgc3RhdHVzZXMsIGNhY2hlOiBmYWxzZSwgZW50aXR5TmFtZSB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgW2BDUkVBVEVfJHthY3Rpb25OYW1lfV9DT01QTEVURURgXShzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHN0YXR1c2VzID0ge1xyXG4gICAgICAgIGlzV3JpdGluZzogZmFsc2VcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgZW50aXRpZXMgPSBub3JtYWxpemVUb0VudGl0aWVzKGFjdGlvbi5wYXlsb2FkLCBlbnRpdHlOYW1lLCBvcHRpb25zKTtcclxuICAgICAgcmV0dXJuIHVwc2VydEVudGl0aWVzVG9TdGF0ZShzdGF0ZSwgYWN0aW9uLCB7IGVudGl0aWVzLCBzdGF0dXNlcywgY2FjaGU6IGZhbHNlLCBlbnRpdHlOYW1lIH0sIG9wdGlvbnMpO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYFVQREFURV8ke2FjdGlvbk5hbWV9YF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBlbnRpdGllcyA9IG5vcm1hbGl6ZVRvRW50aXRpZXMoYWN0aW9uLnBheWxvYWQsIGVudGl0eU5hbWUsIG9wdGlvbnMpO1xyXG4gICAgICBjb25zdCBzdGF0dXNlcyA9IHtcclxuICAgICAgICBpc1dyaXRpbmc6IHRydWVcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHVwZGF0ZUVudGl0aWVzSW5TdGF0ZShzdGF0ZSwgYWN0aW9uLCB7IGVudGl0aWVzLCBzdGF0dXNlcywgY2FjaGU6IHRydWUsIGVudGl0eU5hbWUgfSwgb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuICAgIFtgVVBEQVRFXyR7YWN0aW9uTmFtZX1fRkFJTEVEYF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBlbnRpdGllcyA9IHN0YXRlLmFjdGlvbkNhY2hlW2FjdGlvbi51dWlkXTtcclxuICAgICAgY29uc3Qgc3RhdHVzZXMgPSB7XHJcbiAgICAgICAgaXNXcml0aW5nOiBmYWxzZVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gdXBkYXRlRW50aXRpZXNJblN0YXRlKHN0YXRlLCBhY3Rpb24sIHsgZW50aXRpZXMsIHN0YXR1c2VzLCBjYWNoZTogZmFsc2UsIGVudGl0eU5hbWUgfSwgb3B0aW9ucyk7XHJcbiAgICB9LFxyXG5cclxuICAgIFtgVVBEQVRFXyR7YWN0aW9uTmFtZX1fQ09NUExFVEVEYF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBzdGF0dXNlcyA9IHtcclxuICAgICAgICBpc1dyaXRpbmc6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gbm9ybWFsaXplVG9FbnRpdGllcyhhY3Rpb24ucGF5bG9hZCwgZW50aXR5TmFtZSwgb3B0aW9ucyk7XHJcbiAgICAgIHJldHVybiB1cHNlcnRFbnRpdGllc1RvU3RhdGUoc3RhdGUsIGFjdGlvbiwgeyBlbnRpdGllcywgc3RhdHVzZXMsIGNhY2hlOiBmYWxzZSwgZW50aXR5TmFtZSB9LCBvcHRpb25zKTtcclxuICAgIH0sXHJcblxyXG4gICAgW2BERVNUUk9ZXyR7YWN0aW9uTmFtZX1gXShzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gbm9ybWFsaXplVG9FbnRpdGllcyhhY3Rpb24ucGF5bG9hZCwgZW50aXR5TmFtZSwgb3B0aW9ucyk7XHJcbiAgICAgIGNvbnN0IHN0YXR1c2VzID0ge1xyXG4gICAgICAgIGlzV3JpdGluZzogdHJ1ZVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gcmVtb3ZlRW50aXRpZXNGcm9tU3RhdGUoc3RhdGUsIGFjdGlvbiwgeyBlbnRpdGllcywgc3RhdHVzZXMsIGNhY2hlOiB0cnVlLCBlbnRpdHlOYW1lIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYERFU1RST1lfJHthY3Rpb25OYW1lfV9GQUlMRURgXShzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gc3RhdGUuYWN0aW9uQ2FjaGVbYWN0aW9uLnV1aWRdO1xyXG4gICAgICBjb25zdCBzdGF0dXNlcyA9IHtcclxuICAgICAgICBpc1dyaXRpbmc6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBhZGRFbnRpdGllc1RvU3RhdGUoc3RhdGUsIGFjdGlvbiwgeyBlbnRpdGllcywgc3RhdHVzZXMsIGNhY2hlOiBmYWxzZSwgZW50aXR5TmFtZSB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgW2BERVNUUk9ZXyR7YWN0aW9uTmFtZX1fQ09NUExFVEVEYF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCBzdGF0dXNlcyA9IHtcclxuICAgICAgICBpc1dyaXRpbmc6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGVudGl0aWVzID0geyBbZW50aXR5TmFtZV06IHt9fTtcclxuICAgICAgcmV0dXJuIHVwZGF0ZVN0YXRlKHN0YXRlLCBhY3Rpb24sIHtcclxuICAgICAgICBzdGF0dXNVcGRhdGU6IHsgc3RhdHVzZXMsIGVudGl0aWVzIH0sXHJcbiAgICAgICAgY2FjaGVVcGRhdGU6IHsgdXVpZDogYWN0aW9uLnV1aWQgfSxcclxuICAgICAgICBlbnRpdHlOYW1lXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBbYFNFTEVDVF8ke2FjdGlvbk5hbWV9YF0oc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGFjdGlvbjtcclxuICAgICAgLy8gVE9ETzogT2JqZWN0IHdvcmthcm91bmRcclxuICAgICAgbGV0IGtleSA9IGlzT2JqZWN0KGRhdGEpID8gZGF0YVtvcHRpb25zLmtleU5hbWVdIDogZGF0YTtcclxuICAgICAgbGV0IHNlbGVjdGVkID0gaXNBcnJheShrZXkpID8ga2V5IDogW2tleV07XHJcbiAgICAgIGNvbnN0IHN0YXR1c2VzID0ge1xyXG4gICAgICAgIHNlbGVjdGVkXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGVudGl0aWVzID0geyBbZW50aXR5TmFtZV06IHt9fTtcclxuICAgICAgcmV0dXJuIHVwZGF0ZVN0YXRlKHN0YXRlLCBhY3Rpb24sIHtcclxuICAgICAgICBzdGF0dXNVcGRhdGU6IHsgc3RhdHVzZXMsIGVudGl0aWVzIH0sXHJcbiAgICAgICAgZW50aXR5TmFtZVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgW2BDTEVBUl8ke2FjdGlvbk5hbWV9YF0oc3RhdGUpIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XHJcbiAgICAgICAgW2VudGl0eU5hbWVdOiB7fVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgW2BSRVNFVF8ke2FjdGlvbk5hbWV9YF0oc3RhdGUpIHtcclxuICAgICAgLy8gVE9ETzogUmVzZXQgZXJyb3JzIGFuZCBjYWNoZVxyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcclxuICAgICAgICBbZW50aXR5TmFtZV06IHt9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbWFwVmFsdWVzKGN1c3RvbUFjdGlvbnMsIHJlZHVjZXIgPT4gKHN0YXRlLCBhY3Rpb24pID0+IHtcclxuICAgIGNvbnN0IGluc3RhbmNlU3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZVtuYW1lXSk7XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgW25hbWVdOiByZWR1Y2VyKGluc3RhbmNlU3RhdGUsIGFjdGlvbikgfSk7XHJcbiAgfSkpO1xyXG59Il19