"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.buildAction = exports.mergeLocalFields = exports.buildActionType = exports.parseData = void 0;var _lodash = require("lodash");
var _constants = require("../lib/constants");
var _uuid = _interopRequireDefault(require("uuid"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var parseData = function parseData(options, operation, data) {var
  keyName = options.keyName,uuidVersion = options.uuidVersion,uuidOptions = options.uuidOptions,createKey = options.createKey;
  var dataArray = (0, _lodash.isArray)(data) ? data : [data];
  if (options.addKeyOnCreate && operation == _constants.ActionOperationEnum.CREATE)
  return dataArray.map(function (item) {
    if (!item[keyName])
    item[keyName] = createKey ? createKey() : _uuid.default[uuidVersion](uuidOptions);
    return item;
  });
  return dataArray;
};exports.parseData = parseData;

var buildActionType = function buildActionType(options, operation, name) {return (
  operation ? (0, _lodash.snakeCase)(operation) + '_' + (0, _lodash.snakeCase)(name) : (0, _lodash.snakeCase)(name)).
  toUpperCase();};exports.buildActionType = buildActionType;

var mergeLocalFields = function mergeLocalFields() {var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];return (
    (0, _lodash.union)(['_temp', '_rewrite'], fields));};exports.mergeLocalFields = mergeLocalFields;

var buildAction = function buildAction(options, operation, name, data, customType) {var _meta;var
  localFieldsName = options.localFieldsName,virtualFieldsName = options.virtualFieldsName,transport = options.transport,uuidVersion = options.uuidVersion,uuidOptions = options.uuidOptions;
  var type = customType || buildActionType(options, operation, name);
  var payload = parseData(options, operation, data);
  var uuid = _uuid.default[uuidVersion](uuidOptions);
  return {
    type: type,
    payload: payload,
    uuid: uuid,
    meta: (_meta = {
      name: (0, _lodash.camelCase)(name),
      operation: operation }, _defineProperty(_meta,
    localFieldsName, mergeLocalFields(options[localFieldsName])), _defineProperty(_meta,
    virtualFieldsName, options[virtualFieldsName] || []), _defineProperty(_meta, "offline",
    {
      effect: {
        transport: transport },

      commit: {
        type: type + '_' + _constants.ActionStageEnum.COMPLETED,
        uuid: uuid },

      rollback: {
        type: type + '_' + _constants.ActionStageEnum.FAILED,
        uuid: uuid } }), _meta) };




};exports.buildAction = buildAction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9hY3Rpb25zL2J1aWxkQWN0aW9uLmpzIl0sIm5hbWVzIjpbInBhcnNlRGF0YSIsIm9wdGlvbnMiLCJvcGVyYXRpb24iLCJkYXRhIiwia2V5TmFtZSIsInV1aWRWZXJzaW9uIiwidXVpZE9wdGlvbnMiLCJjcmVhdGVLZXkiLCJkYXRhQXJyYXkiLCJhZGRLZXlPbkNyZWF0ZSIsIkFjdGlvbk9wZXJhdGlvbkVudW0iLCJDUkVBVEUiLCJtYXAiLCJpdGVtIiwiY3JlYXRlVXVpZCIsImJ1aWxkQWN0aW9uVHlwZSIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSIsIm1lcmdlTG9jYWxGaWVsZHMiLCJmaWVsZHMiLCJidWlsZEFjdGlvbiIsImN1c3RvbVR5cGUiLCJsb2NhbEZpZWxkc05hbWUiLCJ2aXJ0dWFsRmllbGRzTmFtZSIsInRyYW5zcG9ydCIsInR5cGUiLCJwYXlsb2FkIiwidXVpZCIsIm1ldGEiLCJlZmZlY3QiLCJjb21taXQiLCJBY3Rpb25TdGFnZUVudW0iLCJDT01QTEVURUQiLCJyb2xsYmFjayIsIkZBSUxFRCJdLCJtYXBwaW5ncyI6ImlMQUFBO0FBQ0E7QUFDQSxvRDs7QUFFTyxJQUFNQSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDQyxPQUFELEVBQVVDLFNBQVYsRUFBcUJDLElBQXJCLEVBQThCO0FBQzdDQyxFQUFBQSxPQUQ2QyxHQUNJSCxPQURKLENBQzdDRyxPQUQ2QyxDQUNwQ0MsV0FEb0MsR0FDSUosT0FESixDQUNwQ0ksV0FEb0MsQ0FDdkJDLFdBRHVCLEdBQ0lMLE9BREosQ0FDdkJLLFdBRHVCLENBQ1ZDLFNBRFUsR0FDSU4sT0FESixDQUNWTSxTQURVO0FBRXJELE1BQU1DLFNBQVMsR0FBRyxxQkFBUUwsSUFBUixJQUFnQkEsSUFBaEIsR0FBdUIsQ0FBQ0EsSUFBRCxDQUF6QztBQUNBLE1BQUlGLE9BQU8sQ0FBQ1EsY0FBUixJQUEwQlAsU0FBUyxJQUFJUSwrQkFBb0JDLE1BQS9EO0FBQ0UsU0FBT0gsU0FBUyxDQUFDSSxHQUFWLENBQWMsVUFBQUMsSUFBSSxFQUFJO0FBQzNCLFFBQUksQ0FBQ0EsSUFBSSxDQUFDVCxPQUFELENBQVQ7QUFDRVMsSUFBQUEsSUFBSSxDQUFDVCxPQUFELENBQUosR0FBZ0JHLFNBQVMsR0FBR0EsU0FBUyxFQUFaLEdBQWlCTyxjQUFXVCxXQUFYLEVBQXdCQyxXQUF4QixDQUExQztBQUNGLFdBQU9PLElBQVA7QUFDRCxHQUpNLENBQVA7QUFLRixTQUFPTCxTQUFQO0FBQ0QsQ0FWTSxDOztBQVlBLElBQU1PLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ2QsT0FBRCxFQUFVQyxTQUFWLEVBQXFCYyxJQUFyQixVQUE4QjtBQUMzRGQsRUFBQUEsU0FBUyxHQUFHLHVCQUFVQSxTQUFWLElBQXVCLEdBQXZCLEdBQTZCLHVCQUFVYyxJQUFWLENBQWhDLEdBQWtELHVCQUFVQSxJQUFWLENBREE7QUFFM0RDLEVBQUFBLFdBRjJELEVBQTlCLEVBQXhCLEM7O0FBSUEsSUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixRQUFDQyxNQUFELHVFQUFVLEVBQVY7QUFDOUIsdUJBQU0sQ0FBQyxPQUFELEVBQVUsVUFBVixDQUFOLEVBQTZCQSxNQUE3QixDQUQ4QixHQUF6QixDOztBQUdBLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNuQixPQUFELEVBQVVDLFNBQVYsRUFBcUJjLElBQXJCLEVBQTJCYixJQUEzQixFQUFpQ2tCLFVBQWpDLEVBQWdEO0FBQ2pFQyxFQUFBQSxlQURpRSxHQUNXckIsT0FEWCxDQUNqRXFCLGVBRGlFLENBQ2hEQyxpQkFEZ0QsR0FDV3RCLE9BRFgsQ0FDaERzQixpQkFEZ0QsQ0FDN0JDLFNBRDZCLEdBQ1d2QixPQURYLENBQzdCdUIsU0FENkIsQ0FDbEJuQixXQURrQixHQUNXSixPQURYLENBQ2xCSSxXQURrQixDQUNMQyxXQURLLEdBQ1dMLE9BRFgsQ0FDTEssV0FESztBQUV6RSxNQUFNbUIsSUFBSSxHQUFHSixVQUFVLElBQUlOLGVBQWUsQ0FBQ2QsT0FBRCxFQUFVQyxTQUFWLEVBQXFCYyxJQUFyQixDQUExQztBQUNBLE1BQU1VLE9BQU8sR0FBRzFCLFNBQVMsQ0FBQ0MsT0FBRCxFQUFVQyxTQUFWLEVBQXFCQyxJQUFyQixDQUF6QjtBQUNBLE1BQU13QixJQUFJLEdBQUdiLGNBQVdULFdBQVgsRUFBd0JDLFdBQXhCLENBQWI7QUFDQSxTQUFPO0FBQ0xtQixJQUFBQSxJQUFJLEVBQUpBLElBREs7QUFFTEMsSUFBQUEsT0FBTyxFQUFQQSxPQUZLO0FBR0xDLElBQUFBLElBQUksRUFBSkEsSUFISztBQUlMQyxJQUFBQSxJQUFJO0FBQ0ZaLE1BQUFBLElBQUksRUFBRSx1QkFBVUEsSUFBVixDQURKO0FBRUZkLE1BQUFBLFNBQVMsRUFBVEEsU0FGRTtBQUdEb0IsSUFBQUEsZUFIQyxFQUdpQkosZ0JBQWdCLENBQUNqQixPQUFPLENBQUNxQixlQUFELENBQVIsQ0FIakM7QUFJREMsSUFBQUEsaUJBSkMsRUFJbUJ0QixPQUFPLENBQUNzQixpQkFBRCxDQUFQLElBQThCLEVBSmpEO0FBS087QUFDUE0sTUFBQUEsTUFBTSxFQUFFO0FBQ05MLFFBQUFBLFNBQVMsRUFBVEEsU0FETSxFQUREOztBQUlQTSxNQUFBQSxNQUFNLEVBQUU7QUFDTkwsUUFBQUEsSUFBSSxFQUFFQSxJQUFJLEdBQUcsR0FBUCxHQUFhTSwyQkFBZ0JDLFNBRDdCO0FBRU5MLFFBQUFBLElBQUksRUFBSkEsSUFGTSxFQUpEOztBQVFQTSxNQUFBQSxRQUFRLEVBQUU7QUFDUlIsUUFBQUEsSUFBSSxFQUFFQSxJQUFJLEdBQUcsR0FBUCxHQUFhTSwyQkFBZ0JHLE1BRDNCO0FBRVJQLFFBQUFBLElBQUksRUFBSkEsSUFGUSxFQVJILEVBTFAsU0FKQyxFQUFQOzs7OztBQXdCRCxDQTdCTSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc25ha2VDYXNlLCBjYW1lbENhc2UsIHVuaW9uLCBpc0FycmF5IH0gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IHsgQWN0aW9uT3BlcmF0aW9uRW51bSwgQWN0aW9uU3RhZ2VFbnVtIH0gZnJvbSAnLi4vbGliL2NvbnN0YW50cyc7XHJcbmltcG9ydCBjcmVhdGVVdWlkIGZyb20gJ3V1aWQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBhcnNlRGF0YSA9IChvcHRpb25zLCBvcGVyYXRpb24sIGRhdGEpID0+IHtcclxuICBjb25zdCB7IGtleU5hbWUsIHV1aWRWZXJzaW9uLCB1dWlkT3B0aW9ucywgY3JlYXRlS2V5IH0gPSBvcHRpb25zO1xyXG4gIGNvbnN0IGRhdGFBcnJheSA9IGlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdO1xyXG4gIGlmIChvcHRpb25zLmFkZEtleU9uQ3JlYXRlICYmIG9wZXJhdGlvbiA9PSBBY3Rpb25PcGVyYXRpb25FbnVtLkNSRUFURSlcclxuICAgIHJldHVybiBkYXRhQXJyYXkubWFwKGl0ZW0gPT4ge1xyXG4gICAgICBpZiAoIWl0ZW1ba2V5TmFtZV0pXHJcbiAgICAgICAgaXRlbVtrZXlOYW1lXSA9IGNyZWF0ZUtleSA/IGNyZWF0ZUtleSgpIDogY3JlYXRlVXVpZFt1dWlkVmVyc2lvbl0odXVpZE9wdGlvbnMpO1xyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH0pO1xyXG4gIHJldHVybiBkYXRhQXJyYXk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYnVpbGRBY3Rpb25UeXBlID0gKG9wdGlvbnMsIG9wZXJhdGlvbiwgbmFtZSkgPT4gKFxyXG4gIG9wZXJhdGlvbiA/IHNuYWtlQ2FzZShvcGVyYXRpb24pICsgJ18nICsgc25ha2VDYXNlKG5hbWUpIDogc25ha2VDYXNlKG5hbWUpXHJcbikudG9VcHBlckNhc2UoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBtZXJnZUxvY2FsRmllbGRzID0gKGZpZWxkcyA9IFtdKSA9PlxyXG4gIHVuaW9uKFsnX3RlbXAnLCAnX3Jld3JpdGUnXSwgZmllbGRzKTtcclxuXHJcbmV4cG9ydCBjb25zdCBidWlsZEFjdGlvbiA9IChvcHRpb25zLCBvcGVyYXRpb24sIG5hbWUsIGRhdGEsIGN1c3RvbVR5cGUpID0+IHtcclxuICBjb25zdCB7IGxvY2FsRmllbGRzTmFtZSwgdmlydHVhbEZpZWxkc05hbWUsIHRyYW5zcG9ydCwgdXVpZFZlcnNpb24sIHV1aWRPcHRpb25zIH0gPSBvcHRpb25zO1xyXG4gIGNvbnN0IHR5cGUgPSBjdXN0b21UeXBlIHx8IGJ1aWxkQWN0aW9uVHlwZShvcHRpb25zLCBvcGVyYXRpb24sIG5hbWUpO1xyXG4gIGNvbnN0IHBheWxvYWQgPSBwYXJzZURhdGEob3B0aW9ucywgb3BlcmF0aW9uLCBkYXRhKTtcclxuICBjb25zdCB1dWlkID0gY3JlYXRlVXVpZFt1dWlkVmVyc2lvbl0odXVpZE9wdGlvbnMpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlLFxyXG4gICAgcGF5bG9hZCxcclxuICAgIHV1aWQsXHJcbiAgICBtZXRhOiB7XHJcbiAgICAgIG5hbWU6IGNhbWVsQ2FzZShuYW1lKSxcclxuICAgICAgb3BlcmF0aW9uLFxyXG4gICAgICBbbG9jYWxGaWVsZHNOYW1lXTogbWVyZ2VMb2NhbEZpZWxkcyhvcHRpb25zW2xvY2FsRmllbGRzTmFtZV0pLFxyXG4gICAgICBbdmlydHVhbEZpZWxkc05hbWVdOiBvcHRpb25zW3ZpcnR1YWxGaWVsZHNOYW1lXSB8fCBbXSxcclxuICAgICAgb2ZmbGluZToge1xyXG4gICAgICAgIGVmZmVjdDoge1xyXG4gICAgICAgICAgdHJhbnNwb3J0XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21taXQ6IHtcclxuICAgICAgICAgIHR5cGU6IHR5cGUgKyAnXycgKyBBY3Rpb25TdGFnZUVudW0uQ09NUExFVEVELFxyXG4gICAgICAgICAgdXVpZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcm9sbGJhY2s6IHtcclxuICAgICAgICAgIHR5cGU6IHR5cGUgKyAnXycgKyBBY3Rpb25TdGFnZUVudW0uRkFJTEVELFxyXG4gICAgICAgICAgdXVpZFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn07Il19