"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.buildAction = exports.mergeLocalFields = exports.buildActionType = exports.parseData = void 0;var _lodash = require("lodash");
var _constants = require("../lib/constants");
var _uuid = _interopRequireDefault(require("uuid"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var parseData = function parseData(options, operation, data) {var
  keyName = options.keyName,uuidVersion = options.uuidVersion,uuidOptions = options.uuidOptions,createKey = options.createKey;
  var dataArray = (0, _lodash.isArray)(data) ? data : [data];
  if (options.addKeyOnCreate && operation == _constants.ActionOperationEnum.CREATE)
  return dataArray.map(function (item) {
    if (!item[keyName])
    item[keyName] = createKey ? createKey() : _uuid.default[uuidVersion](uuidOptions);
    return item;
  });
  return dataArray;
};exports.parseData = parseData;

var buildActionType = function buildActionType(options, operation, name) {return (
  operation ? (0, _lodash.snakeCase)(operation) + '_' + (0, _lodash.snakeCase)(name) : (0, _lodash.snakeCase)(name)).
  toUpperCase();};exports.buildActionType = buildActionType;

var mergeLocalFields = function mergeLocalFields() {var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];return (
    (0, _lodash.union)(['_temp', '_rewrite'], fields));};exports.mergeLocalFields = mergeLocalFields;

var buildAction = function buildAction(options, operation, name, data) {var _meta;var
  localFieldsName = options.localFieldsName,virtualFieldsName = options.virtualFieldsName,transport = options.transport,uuidVersion = options.uuidVersion,uuidOptions = options.uuidOptions;
  var type = buildActionType(options, operation, name);
  var payload = parseData(options, operation, data);
  var uuid = _uuid.default[uuidVersion](uuidOptions);
  return {
    type: type,
    payload: payload,
    uuid: uuid,
    meta: (_meta = {
      name: (0, _lodash.camelCase)(name),
      operation: operation }, _defineProperty(_meta,
    localFieldsName, mergeLocalFields(options[localFieldsName])), _defineProperty(_meta,
    virtualFieldsName, options[virtualFieldsName] || []), _defineProperty(_meta, "offline",
    {
      effect: {
        transport: transport },

      commit: {
        type: type + '_' + _constants.ActionStageEnum.COMPLETED,
        uuid: uuid },

      rollback: {
        type: type + '_' + _constants.ActionStageEnum.FAILED,
        uuid: uuid } }), _meta) };




};exports.buildAction = buildAction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9hY3Rpb25zL2J1aWxkQWN0aW9uLmpzIl0sIm5hbWVzIjpbInBhcnNlRGF0YSIsIm9wdGlvbnMiLCJvcGVyYXRpb24iLCJkYXRhIiwia2V5TmFtZSIsInV1aWRWZXJzaW9uIiwidXVpZE9wdGlvbnMiLCJjcmVhdGVLZXkiLCJkYXRhQXJyYXkiLCJhZGRLZXlPbkNyZWF0ZSIsIkFjdGlvbk9wZXJhdGlvbkVudW0iLCJDUkVBVEUiLCJtYXAiLCJpdGVtIiwiY3JlYXRlVXVpZCIsImJ1aWxkQWN0aW9uVHlwZSIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSIsIm1lcmdlTG9jYWxGaWVsZHMiLCJmaWVsZHMiLCJidWlsZEFjdGlvbiIsImxvY2FsRmllbGRzTmFtZSIsInZpcnR1YWxGaWVsZHNOYW1lIiwidHJhbnNwb3J0IiwidHlwZSIsInBheWxvYWQiLCJ1dWlkIiwibWV0YSIsImVmZmVjdCIsImNvbW1pdCIsIkFjdGlvblN0YWdlRW51bSIsIkNPTVBMRVRFRCIsInJvbGxiYWNrIiwiRkFJTEVEIl0sIm1hcHBpbmdzIjoiaUxBQUE7QUFDQTtBQUNBLG9EOztBQUVPLElBQU1BLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNDLE9BQUQsRUFBVUMsU0FBVixFQUFxQkMsSUFBckIsRUFBOEI7QUFDN0NDLEVBQUFBLE9BRDZDLEdBQ0lILE9BREosQ0FDN0NHLE9BRDZDLENBQ3BDQyxXQURvQyxHQUNJSixPQURKLENBQ3BDSSxXQURvQyxDQUN2QkMsV0FEdUIsR0FDSUwsT0FESixDQUN2QkssV0FEdUIsQ0FDVkMsU0FEVSxHQUNJTixPQURKLENBQ1ZNLFNBRFU7QUFFckQsTUFBTUMsU0FBUyxHQUFHLHFCQUFRTCxJQUFSLElBQWdCQSxJQUFoQixHQUF1QixDQUFDQSxJQUFELENBQXpDO0FBQ0EsTUFBSUYsT0FBTyxDQUFDUSxjQUFSLElBQTBCUCxTQUFTLElBQUlRLCtCQUFvQkMsTUFBL0Q7QUFDRSxTQUFPSCxTQUFTLENBQUNJLEdBQVYsQ0FBYyxVQUFBQyxJQUFJLEVBQUk7QUFDM0IsUUFBSSxDQUFDQSxJQUFJLENBQUNULE9BQUQsQ0FBVDtBQUNFUyxJQUFBQSxJQUFJLENBQUNULE9BQUQsQ0FBSixHQUFnQkcsU0FBUyxHQUFHQSxTQUFTLEVBQVosR0FBaUJPLGNBQVdULFdBQVgsRUFBd0JDLFdBQXhCLENBQTFDO0FBQ0YsV0FBT08sSUFBUDtBQUNELEdBSk0sQ0FBUDtBQUtGLFNBQU9MLFNBQVA7QUFDRCxDQVZNLEM7O0FBWUEsSUFBTU8sZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDZCxPQUFELEVBQVVDLFNBQVYsRUFBcUJjLElBQXJCLFVBQThCO0FBQzNEZCxFQUFBQSxTQUFTLEdBQUcsdUJBQVVBLFNBQVYsSUFBdUIsR0FBdkIsR0FBNkIsdUJBQVVjLElBQVYsQ0FBaEMsR0FBa0QsdUJBQVVBLElBQVYsQ0FEQTtBQUUzREMsRUFBQUEsV0FGMkQsRUFBOUIsRUFBeEIsQzs7QUFJQSxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLFFBQUNDLE1BQUQsdUVBQVUsRUFBVjtBQUM5Qix1QkFBTSxDQUFDLE9BQUQsRUFBVSxVQUFWLENBQU4sRUFBNkJBLE1BQTdCLENBRDhCLEdBQXpCLEM7O0FBR0EsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBQ25CLE9BQUQsRUFBVUMsU0FBVixFQUFxQmMsSUFBckIsRUFBMkJiLElBQTNCLEVBQW9DO0FBQ3JEa0IsRUFBQUEsZUFEcUQsR0FDdUJwQixPQUR2QixDQUNyRG9CLGVBRHFELENBQ3BDQyxpQkFEb0MsR0FDdUJyQixPQUR2QixDQUNwQ3FCLGlCQURvQyxDQUNqQkMsU0FEaUIsR0FDdUJ0QixPQUR2QixDQUNqQnNCLFNBRGlCLENBQ05sQixXQURNLEdBQ3VCSixPQUR2QixDQUNOSSxXQURNLENBQ09DLFdBRFAsR0FDdUJMLE9BRHZCLENBQ09LLFdBRFA7QUFFN0QsTUFBTWtCLElBQUksR0FBR1QsZUFBZSxDQUFDZCxPQUFELEVBQVVDLFNBQVYsRUFBcUJjLElBQXJCLENBQTVCO0FBQ0EsTUFBTVMsT0FBTyxHQUFHekIsU0FBUyxDQUFDQyxPQUFELEVBQVVDLFNBQVYsRUFBcUJDLElBQXJCLENBQXpCO0FBQ0EsTUFBTXVCLElBQUksR0FBR1osY0FBV1QsV0FBWCxFQUF3QkMsV0FBeEIsQ0FBYjtBQUNBLFNBQU87QUFDTGtCLElBQUFBLElBQUksRUFBSkEsSUFESztBQUVMQyxJQUFBQSxPQUFPLEVBQVBBLE9BRks7QUFHTEMsSUFBQUEsSUFBSSxFQUFKQSxJQUhLO0FBSUxDLElBQUFBLElBQUk7QUFDRlgsTUFBQUEsSUFBSSxFQUFFLHVCQUFVQSxJQUFWLENBREo7QUFFRmQsTUFBQUEsU0FBUyxFQUFUQSxTQUZFO0FBR0RtQixJQUFBQSxlQUhDLEVBR2lCSCxnQkFBZ0IsQ0FBQ2pCLE9BQU8sQ0FBQ29CLGVBQUQsQ0FBUixDQUhqQztBQUlEQyxJQUFBQSxpQkFKQyxFQUltQnJCLE9BQU8sQ0FBQ3FCLGlCQUFELENBQVAsSUFBOEIsRUFKakQ7QUFLTztBQUNQTSxNQUFBQSxNQUFNLEVBQUU7QUFDTkwsUUFBQUEsU0FBUyxFQUFUQSxTQURNLEVBREQ7O0FBSVBNLE1BQUFBLE1BQU0sRUFBRTtBQUNOTCxRQUFBQSxJQUFJLEVBQUVBLElBQUksR0FBRyxHQUFQLEdBQWFNLDJCQUFnQkMsU0FEN0I7QUFFTkwsUUFBQUEsSUFBSSxFQUFKQSxJQUZNLEVBSkQ7O0FBUVBNLE1BQUFBLFFBQVEsRUFBRTtBQUNSUixRQUFBQSxJQUFJLEVBQUVBLElBQUksR0FBRyxHQUFQLEdBQWFNLDJCQUFnQkcsTUFEM0I7QUFFUlAsUUFBQUEsSUFBSSxFQUFKQSxJQUZRLEVBUkgsRUFMUCxTQUpDLEVBQVA7Ozs7O0FBd0JELENBN0JNLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzbmFrZUNhc2UsIGNhbWVsQ2FzZSwgdW5pb24sIGlzQXJyYXkgfSBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBBY3Rpb25PcGVyYXRpb25FbnVtLCBBY3Rpb25TdGFnZUVudW0gfSBmcm9tICcuLi9saWIvY29uc3RhbnRzJztcclxuaW1wb3J0IGNyZWF0ZVV1aWQgZnJvbSAndXVpZCc7XHJcblxyXG5leHBvcnQgY29uc3QgcGFyc2VEYXRhID0gKG9wdGlvbnMsIG9wZXJhdGlvbiwgZGF0YSkgPT4ge1xyXG4gIGNvbnN0IHsga2V5TmFtZSwgdXVpZFZlcnNpb24sIHV1aWRPcHRpb25zLCBjcmVhdGVLZXkgfSA9IG9wdGlvbnM7XHJcbiAgY29uc3QgZGF0YUFycmF5ID0gaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV07XHJcbiAgaWYgKG9wdGlvbnMuYWRkS2V5T25DcmVhdGUgJiYgb3BlcmF0aW9uID09IEFjdGlvbk9wZXJhdGlvbkVudW0uQ1JFQVRFKVxyXG4gICAgcmV0dXJuIGRhdGFBcnJheS5tYXAoaXRlbSA9PiB7XHJcbiAgICAgIGlmICghaXRlbVtrZXlOYW1lXSlcclxuICAgICAgICBpdGVtW2tleU5hbWVdID0gY3JlYXRlS2V5ID8gY3JlYXRlS2V5KCkgOiBjcmVhdGVVdWlkW3V1aWRWZXJzaW9uXSh1dWlkT3B0aW9ucyk7XHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbiAgcmV0dXJuIGRhdGFBcnJheTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBidWlsZEFjdGlvblR5cGUgPSAob3B0aW9ucywgb3BlcmF0aW9uLCBuYW1lKSA9PiAoXHJcbiAgb3BlcmF0aW9uID8gc25ha2VDYXNlKG9wZXJhdGlvbikgKyAnXycgKyBzbmFrZUNhc2UobmFtZSkgOiBzbmFrZUNhc2UobmFtZSlcclxuKS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1lcmdlTG9jYWxGaWVsZHMgPSAoZmllbGRzID0gW10pID0+XHJcbiAgdW5pb24oWydfdGVtcCcsICdfcmV3cml0ZSddLCBmaWVsZHMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1aWxkQWN0aW9uID0gKG9wdGlvbnMsIG9wZXJhdGlvbiwgbmFtZSwgZGF0YSkgPT4ge1xyXG4gIGNvbnN0IHsgbG9jYWxGaWVsZHNOYW1lLCB2aXJ0dWFsRmllbGRzTmFtZSwgdHJhbnNwb3J0LCB1dWlkVmVyc2lvbiwgdXVpZE9wdGlvbnMgfSA9IG9wdGlvbnM7XHJcbiAgY29uc3QgdHlwZSA9IGJ1aWxkQWN0aW9uVHlwZShvcHRpb25zLCBvcGVyYXRpb24sIG5hbWUpO1xyXG4gIGNvbnN0IHBheWxvYWQgPSBwYXJzZURhdGEob3B0aW9ucywgb3BlcmF0aW9uLCBkYXRhKTtcclxuICBjb25zdCB1dWlkID0gY3JlYXRlVXVpZFt1dWlkVmVyc2lvbl0odXVpZE9wdGlvbnMpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0eXBlLFxyXG4gICAgcGF5bG9hZCxcclxuICAgIHV1aWQsXHJcbiAgICBtZXRhOiB7XHJcbiAgICAgIG5hbWU6IGNhbWVsQ2FzZShuYW1lKSxcclxuICAgICAgb3BlcmF0aW9uLFxyXG4gICAgICBbbG9jYWxGaWVsZHNOYW1lXTogbWVyZ2VMb2NhbEZpZWxkcyhvcHRpb25zW2xvY2FsRmllbGRzTmFtZV0pLFxyXG4gICAgICBbdmlydHVhbEZpZWxkc05hbWVdOiBvcHRpb25zW3ZpcnR1YWxGaWVsZHNOYW1lXSB8fCBbXSxcclxuICAgICAgb2ZmbGluZToge1xyXG4gICAgICAgIGVmZmVjdDoge1xyXG4gICAgICAgICAgdHJhbnNwb3J0XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21taXQ6IHtcclxuICAgICAgICAgIHR5cGU6IHR5cGUgKyAnXycgKyBBY3Rpb25TdGFnZUVudW0uQ09NUExFVEVELFxyXG4gICAgICAgICAgdXVpZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcm9sbGJhY2s6IHtcclxuICAgICAgICAgIHR5cGU6IHR5cGUgKyAnXycgKyBBY3Rpb25TdGFnZUVudW0uRkFJTEVELFxyXG4gICAgICAgICAgdXVpZFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn07Il19